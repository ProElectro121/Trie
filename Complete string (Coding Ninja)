#include <bits/stdc++.h> 

class Node {
public:
    Node* link[26];
    bool flag = false; // true denotes a string ends here
    bool containsKey(char ch) {
        return link[ch - 'a'] != NULL;
    }

    void put(char ch) {
        link[ch - 'a'] = new Node();
    }

    Node* get(char ch) {
        return link[ch - 'a'];
    }
};

class Trie {
public:
    Node* head;
    Trie() {
        head = new Node();
    }

    void insert(string& word) {
        int n = word.size();
        Node* node = head;
        for(int i = 0; i < n; i++) {
            if(!node -> containsKey(word[i])) {
                node -> put(word[i]);
            }
            node = node -> get(word[i]);
        }
         node -> flag = true; 
    }

    bool search(string& word) {
        int n = word.size();
        Node* node = head;
        for(int i = 0; i < n; i++) {
            node = node -> get(word[i]);
            if(node -> flag == false) return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    string ans;
    Trie ob;
    
    for(int i = 0; i < n; i++) {
        ob.insert(a[i]);    
    }
    
    for(int i = 0; i < n; i++) {
        if(ob.search(a[i])) {
            if(a[i].size() > ans.size()) {
                ans = a[i];
            }
            else if(a[i].size() == ans.size()){
                ans = min(ans , a[i]);
            }
        }
    }
    if(ans == "") ans = "None";
    return ans;
}
